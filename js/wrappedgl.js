"use strict";
var WrappedGL = function() {
    function t(t, e) { for (var r = this.gl = t.getContext("webgl", {
            antialias: false,
            powerPreference: "high-performance",
            preserveDrawingBuffer: false
        }) || t.getContext("experimental-webgl", {
            antialias: false,
            powerPreference: "high-performance",
            preserveDrawingBuffer: false
        }), E = 0; E < u.length; E += 1) this[u[E]] = r[u[E]];
        this.changedParameters = {}, this.parameters = { framebuffer: { defaults: [null], setter: function(t) { r.bindFramebuffer(r.FRAMEBUFFER, t) }, usedInDraw: !0, usedInClear: !0, usedInRead: !0 }, program: { defaults: [{ program: null }], setter: function(t) { r.useProgram(t.program) }, usedInDraw: !0 }, viewport: { defaults: [0, 0, 0, 0], setter: r.viewport, usedInDraw: !0 }, indexBuffer: { defaults: [null], setter: function(t) { r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, t) }, usedInDraw: !0 }, depthTest: { defaults: [!1], setter: function(t) { t ? r.enable(r.DEPTH_TEST) : r.disable(r.DEPTH_TEST) }, usedInDraw: !0 }, depthFunc: { defaults: [r.LESS], setter: r.depthFunc, usedInDraw: !0 }, cullFace: { defaults: [!1], setter: function(t) { t ? r.enable(r.CULL_FACE) : r.disable(r.CULL_FACE) }, usedInDraw: !0 }, frontFace: { defaults: [r.CCW], setter: r.frontFace }, blend: { defaults: [!1], setter: function(t) { t ? r.enable(r.BLEND) : r.disable(r.BLEND) }, usedInDraw: !0 }, blendEquation: { defaults: [r.FUNC_ADD, r.FUNC_ADD], setter: r.blendEquationSeparate, usedInDraw: !0 }, blendFunc: { defaults: [r.ONE, r.ZERO, r.ONE, r.ZERO], setter: r.blendFuncSeparate, usedInDraw: !0 }, polygonOffsetFill: { defaults: [!1], setter: function(t) { t ? r.enable(r.POLYGON_OFFSET_FILL) : r.disable(r.POLYGON_OFFSET_FILL) }, usedInDraw: !0 }, polygonOffset: { defaults: [0, 0], setter: r.polygonOffset, usedInDraw: !0 }, scissorTest: { defaults: [!1], setter: function(t) { t ? r.enable(r.SCISSOR_TEST) : r.disable(r.SCISSOR_TEST) }, usedInDraw: !0, usedInClear: !0 }, scissor: { defaults: [0, 0, 0, 0], setter: r.scissor, usedInDraw: !0, usedInClear: !0 }, colorMask: { defaults: [!0, !0, !0, !0], setter: r.colorMask, usedInDraw: !0, usedInClear: !0 }, depthMask: { defaults: [!0], setter: r.depthMask, usedInDraw: !0, usedInClear: !0 }, clearColor: { defaults: [0, 0, 0, 0], setter: r.clearColor, usedInClear: !0 }, clearDepth: { defaults: [1], setter: r.clearDepth, usedInClear: !0 } }; for (var n = r.getParameter(r.MAX_VERTEX_ATTRIBS), E = 0; E < n; ++E) this.parameters["attributeArray" + E.toString()] = { defaults: [null, 0, null, !1, 0, 0], setter: function() { var t = E; return function(e, E, n, i, a, o) { null !== e && (r.bindBuffer(r.ARRAY_BUFFER, e), r.vertexAttribPointer(t, E, n, i, a, o), r.enableVertexAttribArray(t)) } }(), usedInDraw: !0 }; for (var i = r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS), E = 0; E < i; ++E) this.parameters["texture" + E.toString()] = { defaults: [r.TEXTURE_2D, null], setter: function() { var t = E; return function(e, E) { r.activeTexture(r.TEXTURE0 + t), r.bindTexture(e, E) } }(), usedInDraw: !0 };
        this.uniformSetters = { "1i": r.uniform1i, "2i": r.uniform2i, "3i": r.uniform3i, "4i": r.uniform4i, "1f": r.uniform1f, "2f": r.uniform2f, "3f": r.uniform3f, "4f": r.uniform4f, "1fv": r.uniform1fv, "2fv": r.uniform2fv, "3fv": r.uniform3fv, "4fv": r.uniform4fv, matrix2fv: r.uniformMatrix2fv, matrix3fv: r.uniformMatrix3fv, matrix4fv: r.uniformMatrix4fv }, this.defaultTextureUnit = 0 }

    function e(t, e) { for (var r = 0, E = {}, n = 0; n < t.length; ++n) { var i = t[n];! function() { var n = i,
                    a = new XMLHttpRequest;
                a.onreadystatechange = function() { if (4 === a.readyState) { var i = a.responseText;
                        E[n] = i, r += 1, r === t.length && e(E) } }, a.open("GET", n, !0), a.send() }() } }

    function r(t) { var e = 0; for (var r in t) t.hasOwnProperty(r) && (e += 1); return e }

    function E(t, e, r) { var E = t.createShader(e); return t.shaderSource(E, r), t.compileShader(E), t.getShaderParameter(E, t.COMPILE_STATUS) || console.log(t.getShaderInfoLog(E)), E }

    function n(t, e, r, n) { this.uniformLocations = {}, this.uniforms = {}; var i = t.gl,
            a = E(i, i.VERTEX_SHADER, e),
            o = E(i, i.FRAGMENT_SHADER, r),
            s = this.program = i.createProgram(); if (i.attachShader(s, a), i.attachShader(s, o), void 0 !== n)
            for (var T in n) i.bindAttribLocation(s, n[T], T);
        i.linkProgram(s), this.attributeLocations = {}; for (var u = i.getProgramParameter(s, i.ACTIVE_ATTRIBUTES), _ = 0; _ < u; ++_) { var f = i.getActiveAttrib(s, _),
                T = f.name;
            this.attributeLocations[T] = i.getAttribLocation(s, T) } for (var R = this.uniformLocations = {}, A = i.getProgramParameter(s, i.ACTIVE_UNIFORMS), _ = 0; _ < A; _ += 1) { var h = i.getActiveUniform(s, _),
                p = i.getUniformLocation(s, h.name);
            R[h.name] = p } }

    function i(t) { this.wgl = t, this.changedParameters = {} }

    function a(t, e) { for (var r = 0; r < t.length; ++r)
            if (t[r] !== e[r]) return !1; return !0 }

    function o(t) { i.call(this, t), this.uniforms = {} }

    function s(t) { i.call(this, t) }

    function T(t) { i.call(this, t) } var u = ["ACTIVE_ATTRIBUTES", "ACTIVE_ATTRIBUTE_MAX_LENGTH", "ACTIVE_TEXTURE", "ACTIVE_UNIFORMS", "ACTIVE_UNIFORM_MAX_LENGTH", "ALIASED_LINE_WIDTH_RANGE", "ALIASED_POINT_SIZE_RANGE", "ALPHA", "ALPHA_BITS", "ALWAYS", "ARRAY_BUFFER", "ARRAY_BUFFER_BINDING", "ATTACHED_SHADERS", "BACK", "BLEND", "BLEND_COLOR", "BLEND_DST_ALPHA", "BLEND_DST_RGB", "BLEND_EQUATION", "BLEND_EQUATION_ALPHA", "BLEND_EQUATION_RGB", "BLEND_SRC_ALPHA", "BLEND_SRC_RGB", "BLUE_BITS", "BOOL", "BOOL_VEC2", "BOOL_VEC3", "BOOL_VEC4", "BROWSER_DEFAULT_WEBGL", "BUFFER_SIZE", "BUFFER_USAGE", "BYTE", "CCW", "CLAMP_TO_EDGE", "COLOR_ATTACHMENT0", "COLOR_BUFFER_BIT", "COLOR_CLEAR_VALUE", "COLOR_WRITEMASK", "COMPILE_STATUS", "COMPRESSED_TEXTURE_FORMATS", "CONSTANT_ALPHA", "CONSTANT_COLOR", "CONTEXT_LOST_WEBGL", "CULL_FACE", "CULL_FACE_MODE", "CURRENT_PROGRAM", "CURRENT_VERTEX_ATTRIB", "CW", "DECR", "DECR_WRAP", "DELETE_STATUS", "DEPTH_ATTACHMENT", "DEPTH_BITS", "DEPTH_BUFFER_BIT", "DEPTH_CLEAR_VALUE", "DEPTH_COMPONENT", "DEPTH_COMPONENT16", "DEPTH_FUNC", "DEPTH_RANGE", "DEPTH_STENCIL", "DEPTH_STENCIL_ATTACHMENT", "DEPTH_TEST", "DEPTH_WRITEMASK", "DITHER", "DONT_CARE", "DST_ALPHA", "DST_COLOR", "DYNAMIC_DRAW", "ELEMENT_ARRAY_BUFFER", "ELEMENT_ARRAY_BUFFER_BINDING", "EQUAL", "FASTEST", "FLOAT", "FLOAT_MAT2", "FLOAT_MAT3", "FLOAT_MAT4", "FLOAT_VEC2", "FLOAT_VEC3", "FLOAT_VEC4", "FRAGMENT_SHADER", "FRAMEBUFFER", "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME", "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE", "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE", "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL", "FRAMEBUFFER_BINDING", "FRAMEBUFFER_COMPLETE", "FRAMEBUFFER_INCOMPLETE_ATTACHMENT", "FRAMEBUFFER_INCOMPLETE_DIMENSIONS", "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", "FRAMEBUFFER_UNSUPPORTED", "FRONT", "FRONT_AND_BACK", "FRONT_FACE", "FUNC_ADD", "FUNC_REVERSE_SUBTRACT", "FUNC_SUBTRACT", "GENERATE_MIPMAP_HINT", "GEQUAL", "GREATER", "GREEN_BITS", "HIGH_FLOAT", "HIGH_INT", "INCR", "INCR_WRAP", "INFO_LOG_LENGTH", "INT", "INT_VEC2", "INT_VEC3", "INT_VEC4", "INVALID_ENUM", "INVALID_FRAMEBUFFER_OPERATION", "INVALID_OPERATION", "INVALID_VALUE", "INVERT", "KEEP", "LEQUAL", "LESS", "LINEAR", "LINEAR_MIPMAP_LINEAR", "LINEAR_MIPMAP_NEAREST", "LINES", "LINE_LOOP", "LINE_STRIP", "LINE_WIDTH", "LINK_STATUS", "LOW_FLOAT", "LOW_INT", "LUMINANCE", "LUMINANCE_ALPHA", "MAX_COMBINED_TEXTURE_IMAGE_UNITS", "MAX_CUBE_MAP_TEXTURE_SIZE", "MAX_FRAGMENT_UNIFORM_VECTORS", "MAX_RENDERBUFFER_SIZE", "MAX_TEXTURE_IMAGE_UNITS", "MAX_TEXTURE_SIZE", "MAX_VARYING_VECTORS", "MAX_VERTEX_ATTRIBS", "MAX_VERTEX_TEXTURE_IMAGE_UNITS", "MAX_VERTEX_UNIFORM_VECTORS", "MAX_VIEWPORT_DIMS", "MEDIUM_FLOAT", "MEDIUM_INT", "MIRRORED_REPEAT", "NEAREST", "NEAREST_MIPMAP_LINEAR", "NEAREST_MIPMAP_NEAREST", "NEVER", "NICEST", "NONE", "NOTEQUAL", "NO_ERROR", "NUM_COMPRESSED_TEXTURE_FORMATS", "ONE", "ONE_MINUS_CONSTANT_ALPHA", "ONE_MINUS_CONSTANT_COLOR", "ONE_MINUS_DST_ALPHA", "ONE_MINUS_DST_COLOR", "ONE_MINUS_SRC_ALPHA", "ONE_MINUS_SRC_COLOR", "OUT_OF_MEMORY", "PACK_ALIGNMENT", "POINTS", "POLYGON_OFFSET_FACTOR", "POLYGON_OFFSET_FILL", "POLYGON_OFFSET_UNITS", "RED_BITS", "RENDERBUFFER", "RENDERBUFFER_ALPHA_SIZE", "RENDERBUFFER_BINDING", "RENDERBUFFER_BLUE_SIZE", "RENDERBUFFER_DEPTH_SIZE", "RENDERBUFFER_GREEN_SIZE", "RENDERBUFFER_HEIGHT", "RENDERBUFFER_INTERNAL_FORMAT", "RENDERBUFFER_RED_SIZE", "RENDERBUFFER_STENCIL_SIZE", "RENDERBUFFER_WIDTH", "RENDERER", "REPEAT", "REPLACE", "RGB", "RGB5_A1", "RGB565", "RGBA", "RGBA4", "SAMPLER_2D", "SAMPLER_CUBE", "SAMPLES", "SAMPLE_ALPHA_TO_COVERAGE", "SAMPLE_BUFFERS", "SAMPLE_COVERAGE", "SAMPLE_COVERAGE_INVERT", "SAMPLE_COVERAGE_VALUE", "SCISSOR_BOX", "SCISSOR_TEST", "SHADER_COMPILER", "SHADER_SOURCE_LENGTH", "SHADER_TYPE", "SHADING_LANGUAGE_VERSION", "SHORT", "SRC_ALPHA", "SRC_ALPHA_SATURATE", "SRC_COLOR", "STATIC_DRAW", "STENCIL_ATTACHMENT", "STENCIL_BACK_FAIL", "STENCIL_BACK_FUNC", "STENCIL_BACK_PASS_DEPTH_FAIL", "STENCIL_BACK_PASS_DEPTH_PASS", "STENCIL_BACK_REF", "STENCIL_BACK_VALUE_MASK", "STENCIL_BACK_WRITEMASK", "STENCIL_BITS", "STENCIL_BUFFER_BIT", "STENCIL_CLEAR_VALUE", "STENCIL_FAIL", "STENCIL_FUNC", "STENCIL_INDEX", "STENCIL_INDEX8", "STENCIL_PASS_DEPTH_FAIL", "STENCIL_PASS_DEPTH_PASS", "STENCIL_REF", "STENCIL_TEST", "STENCIL_VALUE_MASK", "STENCIL_WRITEMASK", "STREAM_DRAW", "SUBPIXEL_BITS", "TEXTURE", "TEXTURE0", "TEXTURE1", "TEXTURE2", "TEXTURE3", "TEXTURE4", "TEXTURE5", "TEXTURE6", "TEXTURE7", "TEXTURE8", "TEXTURE9", "TEXTURE10", "TEXTURE11", "TEXTURE12", "TEXTURE13", "TEXTURE14", "TEXTURE15", "TEXTURE16", "TEXTURE17", "TEXTURE18", "TEXTURE19", "TEXTURE20", "TEXTURE21", "TEXTURE22", "TEXTURE23", "TEXTURE24", "TEXTURE25", "TEXTURE26", "TEXTURE27", "TEXTURE28", "TEXTURE29", "TEXTURE30", "TEXTURE31", "TEXTURE_2D", "TEXTURE_BINDING_2D", "TEXTURE_BINDING_CUBE_MAP", "TEXTURE_CUBE_MAP", "TEXTURE_CUBE_MAP_NEGATIVE_X", "TEXTURE_CUBE_MAP_NEGATIVE_Y", "TEXTURE_CUBE_MAP_NEGATIVE_Z", "TEXTURE_CUBE_MAP_POSITIVE_X", "TEXTURE_CUBE_MAP_POSITIVE_Y", "TEXTURE_CUBE_MAP_POSITIVE_Z", "TEXTURE_MAG_FILTER", "TEXTURE_MIN_FILTER", "TEXTURE_WRAP_S", "TEXTURE_WRAP_T", "TRIANGLES", "TRIANGLE_FAN", "TRIANGLE_STRIP", "UNPACK_ALIGNMENT", "UNPACK_COLORSPACE_CONVERSION_WEBGL", "UNPACK_FLIP_Y_WEBGL", "UNPACK_PREMULTIPLY_ALPHA_WEBGL", "UNSIGNED_BYTE", "UNSIGNED_INT", "UNSIGNED_SHORT", "UNSIGNED_SHORT_4_4_4_4", "UNSIGNED_SHORT_5_5_5_1", "UNSIGNED_SHORT_5_6_5", "VALIDATE_STATUS", "VENDOR", "VERSION", "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING", "VERTEX_ATTRIB_ARRAY_ENABLED", "VERTEX_ATTRIB_ARRAY_NORMALIZED", "VERTEX_ATTRIB_ARRAY_POINTER", "VERTEX_ATTRIB_ARRAY_SIZE", "VERTEX_ATTRIB_ARRAY_STRIDE", "VERTEX_ATTRIB_ARRAY_TYPE", "VERTEX_SHADER", "VIEWPORT", "ZERO"]; return t.checkWebGLSupport = function(e, r) { t.checkWebGLSupportWithExtensions([], e, function(t, e) { r() }) }, t.checkWebGLSupportWithExtensions = function(t, e, r) { var E = document.createElement("canvas"),
            n = null; try { n = E.getContext("webgl") || E.getContext("experimental-webgl") } catch (t) { return void r(!1, []) } if (null === n) return void r(!1, []); for (var i = [], a = 0; a < t.length; ++a) null === n.getExtension(t[a]) && i.push(t[a]); return i.length > 0 ? void r(!0, i) : void e() }, t.prototype.getSupportedExtensions = function() { return this.gl.getSupportedExtensions() }, t.prototype.getExtension = function(t) { var e = this.gl; if ("ANGLE_instanced_arrays" === t) { var r = e.getExtension("ANGLE_instanced_arrays"); if (null !== r) { this.instancedExt = r; for (var E = e.getParameter(e.MAX_VERTEX_ATTRIBS), n = 0; n < E; ++n) this.parameters["attributeDivisor" + n.toString()] = { defaults: [0], setter: function() { var t = n; return function(e) { r.vertexAttribDivisorANGLE(t, e) } }(), usedInDraw: !0 }; return o.prototype.vertexAttribPointer = function(t, e, r, E, n, i, a) { return this.setParameter("attributeArray" + e.toString(), [t, r, E, n, i, a]), this.changedParameters.hasOwnProperty("attributeDivisor" + e.toString()) && this.setParameter("attributeDivisor" + e.toString(), [0]), this }, o.prototype.vertexAttribDivisorANGLE = function(t, e) { return this.setParameter("attributeDivisor" + t.toString(), [e]), this }, this.drawArraysInstancedANGLE = function(t, e, r, E, n) { this.resolveDrawState(t), this.instancedExt.drawArraysInstancedANGLE(e, r, E, n) }, this.drawElementsInstancedANGLE = function(t, e, r, E, n, i) { this.resolveDrawState(t), this.instancedExt.drawElementsInstancedANGLE(e, r, E, n, i) }, {} } return null } return e.getExtension(t) }, t.prototype.resolveState = function(t, e) { this.gl; for (var r in this.changedParameters) this.changedParameters.hasOwnProperty(r) && (t.changedParameters.hasOwnProperty(r) || this.parameters[r][e] && (this.parameters[r].setter.apply(this.gl, this.parameters[r].defaults), delete this.changedParameters[r])); for (var r in t.changedParameters) t.changedParameters.hasOwnProperty(r) && (this.changedParameters.hasOwnProperty(r) && a(this.changedParameters[r], t.changedParameters[r]) || (this.changedParameters[r] = t.changedParameters[r], this.parameters[r].setter.apply(this.gl, this.changedParameters[r]))) }, t.prototype.resolveDrawState = function(t) { var e = this.gl;
        this.resolveState(t, "usedInDraw"); var r = t.changedParameters.program[0]; for (var E in t.uniforms)
            if (t.uniforms.hasOwnProperty(E)) { var n = [r.uniformLocations[E]].concat(t.uniforms[E].value);
                this.uniformSetters[t.uniforms[E].type].apply(e, n) } }, t.prototype.drawArrays = function(t, e, r, E) { this.resolveDrawState(t), this.gl.drawArrays(e, r, E) }, t.prototype.drawElements = function(t, e, r, E, n) { this.resolveDrawState(t), this.gl.drawElements(e, r, E, n) }, t.prototype.resolveClearState = function(t) { this.resolveState(t, "usedInClear") }, t.prototype.clear = function(t, e) { this.resolveClearState(t), this.gl.clear(e) }, t.prototype.resolveReadState = function(t) { this.resolveState(t, "usedInRead") }, t.prototype.readPixels = function(t, e, r, E, n, i, a, o) { this.resolveReadState(t), this.gl.readPixels(e, r, E, n, i, a, o) }, t.prototype.finish = function() { return this.gl.finish(), this }, t.prototype.flush = function() { return this.gl.flush(), this }, t.prototype.getError = function() { return this.gl.getError() }, t.prototype.createFramebuffer = function() { return this.gl.createFramebuffer() }, t.prototype.framebufferTexture2D = function(t, e, r, E, n, i) { return this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, t), this.changedParameters.framebuffer = t, this.gl.framebufferTexture2D(e, r, E, n, i), this }, t.prototype.framebufferRenderbuffer = function(t, e, r, E, n) { this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, t), this.changedParameters.framebuffer = t, this.gl.framebufferRenderbuffer(e, r, E, n) }, t.prototype.drawBuffers = function(t, e) { this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, t), this.changedParameters.framebuffer = t, this.drawExt.drawBuffersWEBGL(e) }, t.prototype.createTexture = function() { return this.gl.createTexture() }, t.prototype.bindTextureForEditing = function(t, e) { this.gl.activeTexture(this.gl.TEXTURE0 + this.defaultTextureUnit), this.gl.bindTexture(t, e), this.changedParameters["texture" + this.defaultTextureUnit.toString()] = [t, e] }, t.prototype.texImage2D = function(t, e) { var r = Array.prototype.slice.call(arguments, 2); return r.unshift(t), this.bindTextureForEditing(t, e), this.gl.texImage2D.apply(this.gl, r), this }, t.prototype.texParameteri = function(t, e, r, E) { return this.bindTextureForEditing(t, e), this.gl.texParameteri(t, r, E), this }, t.prototype.texParameterf = function(t, e, r, E) { return this.bindTextureForEditing(t, e), this.gl.texParameterf(t, r, E), this }, t.prototype.pixelStorei = function(t, e, r, E) { return this.bindTextureForEditing(t, e), this.gl.pixelStorei(r, E), this }, t.prototype.setTextureFiltering = function(t, e, r, E, n, i) { var a = this.gl; return this.bindTextureForEditing(t, e), a.texParameteri(a.TEXTURE_2D, a.TEXTURE_WRAP_S, r), a.texParameteri(a.TEXTURE_2D, a.TEXTURE_WRAP_T, E), a.texParameteri(a.TEXTURE_2D, a.TEXTURE_MIN_FILTER, n), a.texParameteri(a.TEXTURE_2D, a.TEXTURE_MAG_FILTER, i), this }, t.prototype.generateMipmap = function(t, e) { return this.bindTextureForEditing(t, e), this.gl.generateMipmap(t), this }, t.prototype.buildTexture = function(t, e, r, E, n, i, a, o, s) { var T = this.createTexture(); return this.rebuildTexture(T, t, e, r, E, n, i, a, o, s), T }, t.prototype.rebuildTexture = function(t, e, r, E, n, i, a, o, s, T) { return this.texImage2D(this.TEXTURE_2D, t, 0, e, E, n, 0, e, r, i)
            .setTextureFiltering(this.TEXTURE_2D, t, a, o, s, T), this }, t.prototype.createRenderbuffer = function() { return this.gl.createRenderbuffer() }, t.prototype.renderbufferStorage = function(t, e, r, E, n) { return this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, t), this.gl.renderbufferStorage(e, r, E, n), this }, t.prototype.createBuffer = function() { return this.gl.createBuffer() }, t.prototype.bufferData = function(t, e, r, E) { var n = this.gl;
        e === n.ARRAY_BUFFER || e === n.ELEMENT_ARRAY_BUFFER && (this.changedParameters.indexBuffer = [t]), n.bindBuffer(e, t), n.bufferData(e, r, E) }, t.prototype.bufferSubData = function(t, e, r, E) { var n = this.gl;
        e === n.ARRAY_BUFFER || e === n.ELEMENT_ARRAY_BUFFER && (this.changedParameters.indexBuffer = [t]), n.bindBuffer(e, t), n.bufferSubData(e, r, E) }, t.prototype.createProgram = function(t, e, r) { return new n(this, t, e, r) }, t.prototype.createProgramFromFiles = function(t, r, E, n, i) { var a = this,
            o = [];
        Array.isArray(t) ? o = o.concat(t) : o.push(t), Array.isArray(r) ? o = o.concat(r) : o.push(r), e(o, function(e) { var i = []; if (Array.isArray(t))
                for (var o = 0; o < t.length; ++o) i.push(e[t[o]]);
            else i.push(e[t]); var s = []; if (Array.isArray(r))
                for (var o = 0; o < r.length; ++o) s.push(e[r[o]]);
            else s.push(e[r]); var T = a.createProgram(i.join("\n"), s.join("\n"), E);
            n(T) }) }, t.prototype.createProgramsFromFiles = function(t, e, E) { var n = r(t),
            i = 0,
            a = {}; for (var o in t)
            if (t.hasOwnProperty(o)) { var s = t[o],
                    T = this;! function() { var t = o;
                    T.createProgramFromFiles(s.vertexShader, s.fragmentShader, s.attributeLocations, function(r) { a[t] = r, i++, i === n && e(a) }) }() } }, t.prototype.createDrawState = function() { return new o(this) }, t.prototype.createClearState = function() { return new s(this) }, t.prototype.createReadState = function() { return new T(this) }, t.prototype.deleteBuffer = function(t) { this.gl.deleteBuffer(t) }, t.prototype.deleteFramebuffer = function(t) { this.gl.deleteFramebuffer(t) }, t.prototype.deleteTexture = function(t) { this.gl.deleteTexture(t) }, n.prototype.getAttribLocation = function(t) { return this.attributeLocations[t] }, i.prototype.setParameter = function(t, e) { a(e, this.wgl.parameters[t].defaults) ? this.changedParameters.hasOwnProperty(t) && delete this.changedParameters[t] : this.changedParameters[t] = e }, i.prototype.clone = function() { var t = new this.constructor(this.wgl); for (var e in this.changedParameters)
            if (this.changedParameters.hasOwnProperty(e)) { for (var r = this.changedParameters[e], E = [], n = 0; n < r.length; ++n) E.push(r[n]);
                t.changedParameters[e] = E } return t }, o.prototype = Object.create(i.prototype), o.prototype.constructor = i, o.prototype.bindFramebuffer = function(t) { return this.setParameter("framebuffer", [t]), this }, o.prototype.viewport = function(t, e, r, E) { return this.setParameter("viewport", [t, e, r, E]), this }, o.prototype.enable = function(t) { return t === this.wgl.DEPTH_TEST ? this.setParameter("depthTest", [!0]) : t === this.wgl.BLEND ? this.setParameter("blend", [!0]) : t === this.wgl.CULL_FACE ? this.setParameter("cullFace", [!0]) : t === this.wgl.POLYGON_OFFSET_FILL ? this.setParameter("polygonOffsetFill", [!0]) : t === this.wgl.SCISSOR_TEST && this.setParameter("scissorTest", [!0]), this }, o.prototype.disable = function(t) { return t === this.wgl.DEPTH_TEST ? this.setParameter("depthTest", [!1]) : t === this.wgl.BLEND ? this.setParameter("blend", [!1]) : t === this.wgl.CULL_FACE ? this.setParameter("cullFace", [!1]) : t === this.wgl.POLYGON_OFFSET_FILL ? this.setParameter("polygonOffsetFill", [!1]) : t === this.wgl.SCISSOR_TEST && this.setParameter("scissorTest", [!1]), this }, o.prototype.vertexAttribPointer = function(t, e, r, E, n, i, a) { return this.setParameter("attributeArray" + e.toString(), [t, r, E, n, i, a]), this.instancedExt && this.changedParameters.hasOwnProperty("attributeDivisor" + e.toString()) && this.setParameter("attributeDivisor" + e.toString(), [0]), this }, o.prototype.bindIndexBuffer = function(t) { return this.setParameter("indexBuffer", [t]), this }, o.prototype.depthFunc = function(t) { return this.setParameter("depthFunc", [t]), this }, o.prototype.frontFace = function(t) { return this.setParameter("frontFace", [t]), this }, o.prototype.blendEquation = function(t) { return this.blendEquationSeparate(t, t), this }, o.prototype.blendEquationSeparate = function(t, e) { return this.setParameter("blendEquation", [t, e]), this }, o.prototype.blendFunc = function(t, e) { return this.blendFuncSeparate(t, e, t, e), this }, o.prototype.blendFuncSeparate = function(t, e, r, E) { return this.setParameter("blendFunc", [t, e, r, E]), this }, o.prototype.scissor = function(t, e, r, E) { return this.setParameter("scissor", [t, e, r, E]), this }, o.prototype.useProgram = function(t) { return this.setParameter("program", [t]), this }, o.prototype.bindTexture = function(t, e, r) { return this.setParameter("texture" + t.toString(), [e, r]), this }, o.prototype.colorMask = function(t, e, r, E) { return this.setParameter("colorMask", [t, e, r, E]), this }, o.prototype.depthMask = function(t) { return this.setParameter("depthMask", [t]), this }, o.prototype.polygonOffset = function(t, e) { return this.setParameter("polygonOffset", [t, e]), this }, o.prototype.uniformTexture = function(t, e, r, E) { return this.uniform1i(t, e), this.bindTexture(e, r, E), this }, o.prototype.uniform1i = function(t, e) { return this.uniforms[t] = { type: "1i", value: [e] }, this }, o.prototype.uniform2i = function(t, e, r) { return this.uniforms[t] = { type: "2i", value: [e, r] }, this }, o.prototype.uniform3i = function(t, e, r, E) { return this.uniforms[t] = { type: "3i", value: [e, r, E] }, this }, o.prototype.uniform4i = function(t, e, r, E, n) { return this.uniforms[t] = { type: "4i", value: [e, r, E, n] }, this }, o.prototype.uniform1f = function(t, e) { return this.uniforms[t] = { type: "1f", value: e }, this }, o.prototype.uniform2f = function(t, e, r) { return this.uniforms[t] = { type: "2f", value: [e, r] }, this }, o.prototype.uniform3f = function(t, e, r, E) { return this.uniforms[t] = { type: "3f", value: [e, r, E] }, this }, o.prototype.uniform4f = function(t, e, r, E, n) { return this.uniforms[t] = { type: "4f", value: [e, r, E, n] }, this }, o.prototype.uniform1fv = function(t, e) { return this.uniforms[t] = { type: "1fv", value: [e] }, this }, o.prototype.uniform2fv = function(t, e) { return this.uniforms[t] = { type: "2fv", value: [e] }, this }, o.prototype.uniform3fv = function(t, e) { return this.uniforms[t] = { type: "3fv", value: [e] }, this }, o.prototype.uniform4fv = function(t, e) { return this.uniforms[t] = { type: "4fv", value: [e] }, this }, o.prototype.uniformMatrix2fv = function(t, e, r) { return this.uniforms[t] = { type: "matrix2fv", value: [e, r] }, this }, o.prototype.uniformMatrix3fv = function(t, e, r) { return this.uniforms[t] = { type: "matrix3fv", value: [e, r] }, this }, o.prototype.uniformMatrix4fv = function(t, e, r) { return this.uniforms[t] = { type: "matrix4fv", value: [e, r] }, this }, s.prototype = Object.create(i.prototype), s.prototype.constructor = s, s.prototype.bindFramebuffer = function(t) { return this.setParameter("framebuffer", [t]), this }, s.prototype.clearColor = function(t, e, r, E) { return this.setParameter("clearColor", [t, e, r, E]), this }, s.prototype.clearDepth = function(t) { return this.setParameter("clearDepth", [t]), this }, s.prototype.colorMask = function(t, e, r, E) { return this.setParameter("colorMask", [t, e, r, E]), this }, s.prototype.depthMask = function(t) { return this.setParameter("depthMask", [t]), this }, T.prototype = Object.create(i.prototype), T.prototype.constructor = T, T.prototype.bindFramebuffer = function(t) { return this.setParameter("framebuffer", [t]), this }, t }();
